labs(
title = paste("Distribution of", var_selected()),
x = var_selected(),
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
if (plot_type_selected() == 'Histogram') {
gg <- gg + geom_histogram(fill = 'skyblue', color = 'black', bins = 30)
} else if (plot_type_selected() == 'Box Plot') {
gg <- gg + geom_boxplot(fill = 'lightgreen', color = 'black')
} else if (plot_type_selected() == 'Bar Plot') {
gg <- gg + geom_bar(fill = 'coral', color = 'black')
}
print(gg)
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the mtcars dataset and convert specified variables to factors
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
# Define UI
ui <- fluidPage(
# Title for the app
titlePanel("mtcars Data Visualization"),
# Input select box for variable selection
sidebarLayout(
sidebarPanel(
selectInput('var_select', 'Select Variable', choices = names(mtcars)),
selectInput('plot_type', 'Select Plot Type', choices = c('Histogram', 'Box Plot', 'Bar Plot'))
),
mainPanel(
# Output plot
plotOutput('plot1'),
# Output text message
textOutput('message')
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive expression to store selected variable
var_selected <- reactive({
input$var_select
})
# Reactive expression to store selected plot type
plot_type_selected <- reactive({
input$plot_type
})
# Render text message based on variable and plot type
output$message <- renderText({
if (is.numeric(mtcars[[var_selected()]])) {
if (plot_type_selected() == 'Bar Plot') {
"Warning: Wrong plot type for a quantitative variable! Please choose Histogram or Box Plot."
} else {
""
}
} else {
if (plot_type_selected() %in% c('Histogram', 'Box Plot')) {
"Warning: Wrong plot type for a categorical variable! Please choose Bar Plot."
} else {
""
}
}
})
# Render plot based on variable and plot type
output$plot1 <- renderPlot({
gg <- ggplot(mtcars, aes(x = .data[[var_selected()]])) +
labs(
title = paste("Distribution of", var_selected()),
x = var_selected(),
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
if (plot_type_selected() == 'Histogram') {
gg <- gg + geom_histogram(fill = 'skyblue', color = 'black', bins = 30)
} else if (plot_type_selected() == 'Box Plot') {
gg <- gg + geom_boxplot(fill = 'lightgreen', color = 'black')
} else if (plot_type_selected() == 'Bar Plot') {
gg <- gg + geom_bar(fill = 'coral', color = 'black')
}
print(gg)
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the mtcars dataset and convert specified variables to factors
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
# Define UI
ui <- fluidPage(
# Title for the app
titlePanel("mtcars Data Visualization"),
# Input select box for variable selection
sidebarLayout(
sidebarPanel(
selectInput('var_select', 'Select Variable', choices = names(mtcars)),
selectInput('plot_type', 'Select Plot Type', choices = c('Histogram', 'Box Plot', 'Bar Plot'))
),
mainPanel(
# Output plot
plotOutput('plot1'),
# Output text message
textOutput('message')
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive expression to store selected variable
var_selected <- reactive({
input$var_select
})
# Reactive expression to store selected plot type
plot_type_selected <- reactive({
input$plot_type
})
# Render text message based on variable and plot type
output$message <- renderText({
if (is.numeric(mtcars[[var_selected()]])) {
if (plot_type_selected() == 'Bar Plot') {
"Warning: Wrong plot type for a quantitative variable! Please choose Histogram or Box Plot."
} else {
""
}
} else {
if (plot_type_selected() %in% c('Histogram', 'Box Plot')) {
"Warning: Wrong plot type for a categorical variable! Please choose Bar Plot."
} else {
""
}
}
})
# Render plot based on variable and plot type
output$plot1 <- renderPlot({
gg <- ggplot(mtcars, aes(x = .data[[var_selected()]])) +
labs(
title = paste("Distribution of", var_selected()),
x = var_selected(),
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
if (plot_type_selected() == 'Histogram') {
gg <- gg + geom_histogram(fill = 'skyblue', color = 'black', bins = 30)
} else if (plot_type_selected() == 'Box Plot') {
gg <- gg + geom_boxplot(fill = 'lightgreen', color = 'black')
} else if (plot_type_selected() == 'Bar Plot') {
gg <- gg + geom_bar(fill = .data[[var_selected()]]), color = 'black') +
library(tidyverse)
library(shiny)
# Load the mtcars dataset and convert specified variables to factors
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
# Define UI
ui <- fluidPage(
# Title for the app
titlePanel("mtcars Data Visualization"),
# Input select box for variable selection
sidebarLayout(
sidebarPanel(
selectInput('var_select', 'Select Variable', choices = names(mtcars)),
selectInput('plot_type', 'Select Plot Type', choices = c('Histogram', 'Box Plot', 'Bar Plot'))
),
mainPanel(
# Output plot
plotOutput('plot1'),
# Output text message
textOutput('message')
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive expression to store selected variable
var_selected <- reactive({
input$var_select
})
# Reactive expression to store selected plot type
plot_type_selected <- reactive({
input$plot_type
})
# Render text message based on variable and plot type
output$message <- renderText({
if (is.numeric(mtcars[[var_selected()]])) {
if (plot_type_selected() == 'Bar Plot') {
"Warning: Wrong plot type for a quantitative variable! Please choose Histogram or Box Plot."
} else {
""
}
} else {
if (plot_type_selected() %in% c('Histogram', 'Box Plot')) {
"Warning: Wrong plot type for a categorical variable! Please choose Bar Plot."
} else {
""
}
}
})
# Render plot based on variable and plot type
output$plot1 <- renderPlot({
gg <- ggplot(mtcars, aes(x = .data[[var_selected()]])) +
labs(
title = paste("Distribution of", var_selected()),
x = var_selected(),
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
if (plot_type_selected() == 'Histogram') {
gg <- gg + geom_histogram(fill = 'skyblue', color = 'black', bins = 30)
} else if (plot_type_selected() == 'Box Plot') {
gg <- gg + geom_boxplot(fill = 'lightgreen', color = 'black')
} else if (plot_type_selected() == 'Bar Plot') {
gg <- gg + geom_bar(fill = .data[[var_selected()]]), color = 'black') +
library(tidyverse)
library(shiny)
# Load the mtcars dataset and convert specified variables to factors
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
# Define UI
ui <- fluidPage(
# Title for the app
titlePanel("mtcars Data Visualization"),
# Input select box for variable selection
sidebarLayout(
sidebarPanel(
selectInput('var_select', 'Select Variable', choices = names(mtcars)),
selectInput('plot_type', 'Select Plot Type', choices = c('Histogram', 'Box Plot', 'Bar Plot'))
),
mainPanel(
# Output plot
plotOutput('plot1'),
# Output text message
textOutput('message')
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive expression to store selected variable
var_selected <- reactive({
input$var_select
})
# Reactive expression to store selected plot type
plot_type_selected <- reactive({
input$plot_type
})
# Render text message based on variable and plot type
output$message <- renderText({
if (is.numeric(mtcars[[var_selected()]])) {
if (plot_type_selected() == 'Bar Plot') {
"Warning: Wrong plot type for a quantitative variable! Please choose Histogram or Box Plot."
} else {
""
}
} else {
if (plot_type_selected() %in% c('Histogram', 'Box Plot')) {
"Warning: Wrong plot type for a categorical variable! Please choose Bar Plot."
} else {
""
}
}
})
# Render plot based on variable and plot type
output$plot1 <- renderPlot({
gg <- ggplot(mtcars, aes(x = .data[[var_selected()]])) +
labs(
title = paste("Distribution of", var_selected()),
x = var_selected(),
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16)
)
if (plot_type_selected() == 'Histogram') {
gg <- gg + geom_histogram(fill = 'skyblue', color = 'black', bins = 30)
} else if (plot_type_selected() == 'Box Plot') {
gg <- gg + geom_boxplot(fill = 'lightgreen', color = 'black')
} else if (plot_type_selected() == 'Bar Plot') {
gg <- gg + geom_bar(aes(fill = .data[[var_selected()]]), color = 'black') +
scale_fill_brewer(palette = 'Set3')
}
print(gg)
})
}
# Run the app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Function to create a ggplot histogram
ghist <- function(data, x_var, bins = 30) {
ggplot(data, aes(x = {{x_var}})) +
geom_histogram(binwidth = bins, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram",
x = deparse(substitute(x_var)),
y = "Frequency")
}
# Function to create a ggplot box plot
gbox <- function(data, x_var, y_var = NULL, horizontal = FALSE) {
if (is.null(y_var)) {
# Single numeric vector provided, create a box plot
ggplot(data, aes(x = 1, y = {{x_var}})) +
geom_boxplot() +
labs(title = "Box Plot",
x = "",
y = deparse(substitute(x_var)))
} else {
# Numeric and categorical variables provided, create side-by-side box plots
if (horizontal) {
ggplot(data, aes(x = {{y_var}}, y = {{x_var}})) +
geom_boxplot() +
labs(title = "Side-by-Side Box Plots",
x = deparse(substitute(y_var)),
y = deparse(substitute(x_var)))
} else {
ggplot(data, aes(x = {{x_var}}, y = {{y_var}})) +
geom_boxplot() +
labs(title = "Side-by-Side Box Plots",
x = deparse(substitute(x_var)),
y = deparse(substitute(y_var)))
}
}
}
#' Create a ggplot histogram
#' @param data Data frame
#' @param x_var Variable for the x-axis
#' @param bins Number of bins for the histogram
#' @return ggplot object
ghist <- function(data, x_var, bins = 30) {
ggplot(data, aes(x = {{x_var}})) +
geom_histogram(binwidth = bins, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram",
x = deparse(substitute(x_var)),
y = "Frequency")
}
#' Create a ggplot box plot
#' @param data Data frame
#' @param x_var Variable for the x-axis
#' @param y_var Variable for the y-axis (optional)
#' @param horizontal Boolean indicating whether to create horizontal box plots
#' @return ggplot object
gbox <- function(data, x_var, y_var = NULL, horizontal = FALSE) {
if (is.null(y_var)) {
# Single numeric vector provided, create a box plot
ggplot(data, aes(x = 1, y = {{x_var}})) +
geom_boxplot() +
labs(title = "Box Plot",
x = "",
y = deparse(substitute(x_var)))
} else {
# Numeric and categorical variables provided, create side-by-side box plots
if (horizontal) {
ggplot(data, aes(x = {{y_var}}, y = {{x_var}})) +
geom_boxplot() +
labs(title = "Side-by-Side Box Plots",
x = deparse(substitute(y_var)),
y = deparse(substitute(x_var)))
} else {
ggplot(data, aes(x = {{x_var}}, y = {{y_var}})) +
geom_boxplot() +
labs(title = "Side-by-Side Box Plots",
x = deparse(substitute(x_var)),
y = deparse(substitute(y_var)))
}
}
}
devtools::document()
setwd("/Users/priscillawen/Desktop/Math_3190/myplots.pw")
devtools::document()
setwd("/Users/priscillawen/Desktop/Math_3190/myplots.pw")
setwd("/Users/priscillawen/Desktop/Math_3190/myplots.pw")
setwd("/Users/priscillawen/Desktop/Math_3190/myplots.pw")
setwd("/Users/priscillawen/Desktop/Math_3190/myplots.pw")
devtools::document()
library(myplots.pw)
# Assuming you have a data frame named 'my_data'
ghist(my_data, numeric_var)
library(myplots.pw)
?ghist
??ghist
?gbox
#' Create a ggplot histogram
#' @param data Data frame
#' @param x_var Variable for the x-axis
#' @param bins Number of bins for the histogram
#' @return ggplot object
ghist <- function(data, x_var, bins = 30) {
ggplot(data, aes(x = {{x_var}})) +
geom_histogram(binwidth = bins, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram",
x = deparse(substitute(x_var)),
y = "Frequency")
}
#' Create a ggplot box plot
#' @param data Data frame
#' @param x_var Variable for the x-axis
#' @param y_var Variable for the y-axis (optional)
#' @param horizontal Boolean indicating whether to create horizontal box plots
#' @return ggplot object
gbox <- function(data, x_var, y_var = NULL, horizontal = FALSE) {
if (is.null(y_var)) {
# Single numeric vector provided, create a box plot
ggplot(data, aes(x = 1, y = {{x_var}})) +
geom_boxplot() +
labs(title = "Box Plot",
x = "",
y = deparse(substitute(x_var)))
} else {
# Numeric and categorical variables provided, create side-by-side box plots
if (horizontal) {
ggplot(data, aes(x = {{y_var}}, y = {{x_var}})) +
geom_boxplot() +
labs(title = "Side-by-Side Box Plots",
x = deparse(substitute(y_var)),
y = deparse(substitute(x_var)))
} else {
ggplot(data, aes(x = {{x_var}}, y = {{y_var}})) +
geom_boxplot() +
labs(title = "Side-by-Side Box Plots",
x = deparse(substitute(x_var)),
y = deparse(substitute(y_var)))
}
}
}
#' Create a ggplot histogram
#' @param data Data frame
#' @param x_var Variable for the x-axis
#' @param bins Number of bins for the histogram
#' @return ggplot object
ghist <- function(data, x_var, bins = 30) {
ggplot(data, aes(x = {{x_var}})) +
geom_histogram(binwidth = bins, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram",
x = deparse(substitute(x_var)),
y = "Frequency")
}
#' Create a ggplot box plot
#' @param data Data frame
#' @param x_var Variable for the x-axis
#' @param y_var Variable for the y-axis (optional)
#' @param horizontal Boolean indicating whether to create horizontal box plots
#' @return ggplot object
gbox <- function(data, x_var, y_var = NULL, horizontal = FALSE) {
if (is.null(y_var)) {
# Single numeric vector provided, create a box plot
ggplot(data, aes(x = 1, y = {{x_var}})) +
geom_boxplot() +
labs(title = "Box Plot",
x = "",
y = deparse(substitute(x_var)))
} else {
# Numeric and categorical variables provided, create side-by-side box plots
if (horizontal) {
ggplot(data, aes(x = {{y_var}}, y = {{x_var}})) +
geom_boxplot() +
labs(title = "Side-by-Side Box Plots",
x = deparse(substitute(y_var)),
y = deparse(substitute(x_var)))
} else {
ggplot(data, aes(x = {{x_var}}, y = {{y_var}})) +
geom_boxplot() +
labs(title = "Side-by-Side Box Plots",
x = deparse(substitute(x_var)),
y = deparse(substitute(y_var)))
}
}
}
devtools::document()
library(myplots.pw)
